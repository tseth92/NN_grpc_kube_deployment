# -*- coding: utf-8 -*-
"""neural_network square.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/tseth92/NeuralNet_Square/blob/master/neural_network_square.ipynb
"""

'''Training a neural network to predict the square of a number'''
import numpy as np
import matplotlib.pyplot as pp
import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.layers.core import Dense
import pickle
import time
from flask import request
from flask import json
from flask_api import FlaskAPI
from flask import Response
import nn_sq_pb2_grpc
import nn_sq_pb2
import grpc
from concurrent import futures
import keras.backend as KTF
import os
'''configurations for neural net'''
## change these values to experiment

#APP = FlaskAPI(__name__)

##n_samples = 100000 # number of samples between 0 and mid_range
##epochs = 150
##batch_size = 1000
##mid_range = 10 # range within which data is required


class prediction_server(nn_sq_pb2_grpc.NNTrainPredictServicer):
  
  def __init__(self):
    print('in init') 
 
  '''creates random samples of n_samples rows which are between 0 to 1.
  mid_range decides the range under which the samples will be created.'''
  def get_data(self, n_samples, mid_range):
    X = np.random.random((n_samples,1))*mid_range-(mid_range/2)
    # eg. if n_samples = 10000, mid_range = 10 then it will create samples b/w
    # 0 and 5 positive and negative
    y = X*X
    #print(X)
    return X,y

  ''' predict the model for X(training data) and or X2 which is outside
  the training dataset'''
  #@APP.route("/predictNNSq", methods=['GET'])
  def PredictModel(self, request, context):
    #pred = model.predict(X)
    #config = tf.ConfigProto()
    #config.gpu_options.allow_growth = False
    #config.gpu_options.per_process_gpu_memory_fraction = 0.40
    #keras.backend.tensorflow_backend.set_session(tf.Session(config=config))
    gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.3)
    tf_sess = tf.Session(config=tf.ConfigProto(gpu_options=gpu_options))
    KTF.set_session(tf_sess)
    print('pid is : ', os.getpid())
    response_dict = {}
    n_samples = 100000 # number of samples between 0 and mid_range
    epochs = 150
    batch_size = 1000
    mid_range = 10 # range within which data is required
    #model_file_name = 'nn_sq_1569408167'
    model_file_name = request.model_name
    print('model file name is: ', model_file_name)
    X,y = self.get_data(n_samples, mid_range)
    model = pickle.load(open('/mnt/nn-disk/'+model_file_name, 'rb'))
    pred = model.predict(X)
    mid_range = 20
    X2 = np.random.random((n_samples,1))*mid_range-(mid_range/2)
    pred2 = model.predict(X2)
     # uncomment below code to observe the expected and actual values
    # in the form (inputData, expectedOutputData, predictedOutputData, difference)
     #pred2 = model.predict([-6])
    for i,j in zip(X, pred):
      print(i,i*i,j, j-(i*i))
    pp.figure(figsize=(10,3))
    pp.plot(X,pred, '.')
    pp.xlabel('x')
    pp.ylabel('prediction')
    pp.title('Prediction within training sample space')
    pp.figure(figsize=(10,3))
    pp.plot(X2,pred2, '.')
    pp.xlabel('x')
    pp.ylabel('prediction')
    pp.title('Prediction outside training sample space')
    #response_dict['STATUS'] = "true"
    #js_dump = json.dumps(response_dict)
    #resp = Response(js_dump,\
    #                      status=200,\
    #                      mimetype='application/json')
    resp = nn_sq_pb2.NNResponse(ack = 'Success') 
    return resp

def serve():
  PORT = 5001
  _ONE_DAY_IN_SECONDS = 60 * 60 * 24
  server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
  nn_sq_pb2_grpc.add_NNTrainPredictServicer_to_server(prediction_server(), server)
  server.add_insecure_port('[::]:5001') 
  server.start()
  try:
    while True:
      time.sleep(_ONE_DAY_IN_SECONDS)
  except KeyboardInterrupt:
    server.stop(0)

if __name__ == '__main__' :
  #model_file_name = 'nn_sq_1569408167'
  #APP.run(host='0.0.0.0', port=5000)
  serve() 
